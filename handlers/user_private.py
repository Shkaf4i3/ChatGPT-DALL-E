from aiogram import Router, F
from aiogram.filters import CommandStart, Command
from aiogram.types import Message
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext

import reply as kb
from handlers.function import generate_answer, generate_image


user_private_router = Router()


class Generate_prompt(StatesGroup):
    prompt_answer = State()
    prompt_photo = State()


@user_private_router.message(CommandStart())
async def start_message(message: Message):
    await message.answer(f'–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name} ‚ù§Ô∏è\n'
                        '–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã –≤–æ—Å–ø–æ–ª—å–∑—É–π—Å—è –º–µ–Ω—é',
                        reply_markup=await kb.main_kb())


@user_private_router.message(Command('help'))
async def help_message(message: Message):
    await message.answer('–õ—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã –ø–æ –±–æ—Ç—É —Å—é–¥–∞ üëâ @shkaf4i3')


@user_private_router.message(F.text == '–û –±–æ—Ç–µ ü•ù')
async def about_info(message: Message):
    await message.answer('ü™¨ –î–∞–Ω–Ω—ã–π –±–æ—Ç - –≥–µ–Ω–µ—Ä–∞—Ç–∏–≤–Ω—ã–π –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç ChatGPT 4 ü™¨',
                        reply_markup=await kb.back_main_kb())


@user_private_router.message(F.text == '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é üëà')
async def back_menu(message: Message):
    await message.answer('–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –º–µ–Ω—é üíã', reply_markup=await kb.main_kb())


@user_private_router.message(F.text == '–í—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å üìä')
async def request_answer_message(message: Message, state: FSMContext):
    await state.set_state(Generate_prompt.prompt_answer)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å üëâ', reply_markup=await kb.break_prompt_kb())


@user_private_router.message(Generate_prompt.prompt_answer)
async def get_answer_message(message: Message, state: FSMContext):
    await state.update_data(prompt_answer=message.text)
    user_text = message.text
    create_answer = await generate_answer(message.text)

    if user_text == '–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å ‚ùå':
        await message.answer('–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –º–µ–Ω—é', reply_markup=await kb.main_kb())
    else:
        await message.answer(f'{create_answer}')
    await state.clear()


@user_private_router.message(F.text == '–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ñ–æ—Ç–æ ü•ù')
async def request_photo(message: Message, state: FSMContext):
    await state.set_state(Generate_prompt.prompt_photo)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –∫ —Ñ–æ—Ç–æ ü™¨', reply_markup=await kb.break_prompt_kb())


@user_private_router.message(Generate_prompt.prompt_photo)
async def get_photo(message: Message, state: FSMContext):
    await state.update_data(prompt_photo=message.text)
    user_text = message.text
    create_photo = await generate_image(message.text)

    if user_text == '–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å ‚ùå':
        await message.answer('–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –º–µ–Ω—é', reply_markup=await kb.main_kb())
    else:
        await message.answer(f'{create_photo}')
    await state.clear()
